TEST HINF 1
% Outer loop specifications
wc = 1.8;                               %[rad/s] bandwidth of the system
responsetime = 2/wc;                   %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    

% Inner loop specs
wc_inner = 110;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;      



Soft: [-Inf,Inf], Hard: [1.45,1.45], Iterations = 78
Soft: [-Inf,Inf], Hard: [1.45,1.45], Iterations = 21
Final: Soft = -Inf, Hard = 1.4471, Iterations = 99

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.636, Ki = 5.75, Kd = 0.0583, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.

Soft: [-Inf,-Inf], Hard: [0.789,0.789], Iterations = 0
Found solution that satisfies all the hard goals.
Final: Soft = -Inf, Hard = 0.78855, Iterations = 0

Cp =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.636, Ki = 5.75, Kd = 0.0583, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.


Ctheta =
 
               s    
  Kp + Kd * --------
             Tf*s+1 

  with Kp = 1.9, Kd = 0.005, Tf = 0.01
 
Name: Cphi0
Continuous-time PDF controller in parallel form. 

--------------------------------------------------------------------------------
TEST HINF #2
% Inner loop speficications
wc_inner = 10;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);
attfact = frd([100 1 1],[0.1*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaOmega',attfact);

% Outer loop specifications
wc = 1.8;                               %[rad/s] bandwidth of the system
responsetime = 2/wc;                   %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
R1 = TuningGoal.Tracking('phi_0','phi',responsetime,dcerror,peakerror);

log tilt_3008_1  o_attitude radio mixer_ctr attitude_ctr
Cp =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.578, Ki = 0.7, Kd = 0.0158, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.


Ctheta =
 
               s    
  Kp + Kd * --------
             Tf*s+1 

  with Kp = 1.9, Kd = 0.005, Tf = 0.01

RESULT: FLIGHT

-----------------------------------------------------------------------
TEST HINF #3

% Inner loop speficications
wc_inner = 8;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.2;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);

attfact = frd([100 1 1],[0.1*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaOmega',attfact);

Soft: [-Inf,-Inf], Hard: [0.866,0.866], Iterations = 0
Found solution that satisfies all the hard goals.
Final: Soft = -Inf, Hard = 0.86552, Iterations = 0

Cp =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.188, Ki = 3.25, Kd = 0.0111, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.


Ctheta =
 
               s    
  Kp + Kd * --------
             Tf*s+1 

  with Kp = 1.9, Kd = 0.005, Tf = 0.01
 
Name: Cphi0
Continuous-time PDF controller in parallel form.

RESULT : NO FLIGHT
-------------------------------------------------------------------
TEST HIHF #4

% Inner loop speficications
wc_inner = 10;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);

attfact = frd([100 1 1],[0.01*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaOmega',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [Req_inner R3];
[CL_inner,fSoft,gHard] = systune(InnerLoop0,SoftReqs,HardReqs);


Final: Soft = -Inf, Hard = 1.1805, Iterations = 52

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.242, Ki = 3.4, Kd = 0.0127, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.

Soft: [-Inf,Inf], Hard: [1.08,1.08], Iterations = 27
Soft: [-Inf,Inf], Hard: [1.08,1.08], Iterations = 21
Final: Soft = -Inf, Hard = 1.0802, Iterations = 48

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.104, Ki = 0.586, Kd = 0.00483, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.

RESULT: FALLITO
-------------------------------------
TEST HINF #5

% Inner loop speficications
wc_inner = 10;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);

attfact = frd([100 1 1],[0.3*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaOmega',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [Req_inner R3];
[CL_inner,fSoft,gHard] = systune(InnerLoop0,SoftReqs,HardReqs);

Final: Soft = -Inf, Hard = 1.1641, Iterations = 52

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.223, Ki = 1.94, Kd = 0.0101, Tf = 0.01
 
Name: Cp0

RESULT : SHIT
--------------------------------------------------------------
TEST HINF #5
% Inner loop speficications
wc_inner = 50;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.1;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);

attfact = frd([10 1 1],[0.1*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaOmega',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [Req_inner ];
[CL_inner,fSoft,gHard] = systune(InnerLoop0,SoftReqs,HardReqs);


Final: Soft = -Inf, Hard = 1.2733, Iterations = 46

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.394, Ki = 2.84, Kd = 0.0254, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.
--------------------------------------------
TEST HINF #6

% Inner loop speficications
wc_inner = 10;
responsetime = 2/wc_inner;             %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.25;                    
Req_inner = TuningGoal.Tracking('p_0','p',responsetime,dcerror,peakerror);

attfact = frd([10 1 1],[0.2*wc_inner wc_inner 10*wc_inner]);
R3 = TuningGoal.Rejection('deltaL',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [Req_inner];
[CL_inner,fSoft,gHard] = systune(InnerLoop0,SoftReqs,HardReqs);


Final: Soft = -Inf, Hard = 0.97453, Iterations = 2

R_inner_tuned =
 
             1            s    
  Kp + Ki * --- + Kd * --------
             s          Tf*s+1 

  with Kp = 0.298, Ki = 0.697, Kd = 0.00534, Tf = 0.01
 
Name: Cp0
Continuous-time PIDF controller in parallel form.

RESULT: PERFECT! USIAMO QUESTO!
-----------------------------------------
TEST HINF ANELLO ESTERNO #7
% Outer loop specifications
wc = 2.45;                               %[rad/s] bandwidth of the system
responsetime = 2/wc;                   %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
R1 = TuningGoal.Tracking('phi_0','phi',responsetime,dcerror,peakerror);

attfact = frd([10 1 1],[0.1*wc wc 10*wc]);
R3_outer = TuningGoal.Rejection('phi',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [R1 R3_outer];
[CL,fSoft,gHard] = systune(CL0,SoftReqs,HardReqs);




Ctheta =
 
               s    
  Kp + Kd * --------
             Tf*s+1 

  with Kp = 2.41, Kd = 0.0868, Tf = 0.01
 
Name: Cphi0
Continuous-time PDF controller in parallel form.

RESULT: FALLITO
----------------------------------------------------------
TEST HINF ANELLO ESTERNO #8
%% TUNING REQUIREMENTS OUTER LOOP
% Outer loop specifications
wc = 1.6;                               %[rad/s] bandwidth of the system
responsetime = 2/wc;                   %[s] In this way we are able to track all the signals in the bandwidth of the system
dcerror = 0.0001;                      %[%] steady state error ( relative gain of input vs output) (default value)
peakerror = 1.3;                    
R1 = TuningGoal.Tracking('phi_0','phi',responsetime,dcerror,peakerror);

attfact = frd([10 1 1],[0.1*wc wc 10*wc]);
R3_outer = TuningGoal.Rejection('phi',attfact);

%Tune the control system
SoftReqs = [];
%HardReqs = [Rtrack Rreject];
HardReqs = [R1 R3_outer];
[CL,fSoft,gHard] = systune(CL0,SoftReqs,HardReqs);

Ctheta =
 
               s    
  Kp + Kd * --------
             Tf*s+1 

  with Kp = 1.61, Kd = 0.0584, Tf = 0.01
 
Name: Cphi0
Continuous-time PDF controller in parallel form.

RESULT : OK USIAMO QUESTO!
 log tilt_3008_6avi  o_attitude radio mixer_ctr attitude_ctr
 log tilt_3008_5avi  o_attitude radio mixer_ctr attitude_ctr
---------------------------------------------------------------

per i log tilt tilt_3008_10avi e tilt_3008_11avi ho usato i parametri

% HINF funzionante - test 1 - VALORI DI SABATO
 KRP = 1.43;
 KRD = 0.01;

per i log dopo sono passato ai valori iniziali
% TEST HINF ANELLO ESTERNO #8 - OK
KRP = 1.61;
KRD = 0.0584;
